import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

def render(data):
    """
    P√°gina de An√°lise Demogr√°fica
    
    Respons√°vel: [NOME_DESENVOLVEDOR_3]
    Prazo: [DATA_PRAZO]
    
    Esta p√°gina deve conter:
    - Distribui√ß√£o por faixa et√°ria
    - An√°lise por sexo
    - Padr√µes demogr√°ficos espec√≠ficos
    """
    
    st.title("üë• An√°lise Demogr√°fica")
    st.markdown("---")
    
    # Placeholder para desenvolvimento
    st.info("üöß **√Årea de Desenvolvimento - An√°lise Demogr√°fica**")
    st.markdown("""
    ### Tarefas para o Desenvolvedor:
    
    1. **Distribui√ß√£o por Idade**:
       - Histograma de idades
       - Faixas et√°rias (0-18, 19-59, 60+)
       - M√©dias e medianas por grupo
    
    2. **An√°lise por Sexo**:
       - Distribui√ß√£o geral por sexo
       - Causas espec√≠ficas por sexo
       - Diferen√ßas nos valores gastos
    
    3. **Pir√¢mide Et√°ria**:
       - Visualiza√ß√£o por sexo e idade
       - Compara√ß√£o com popula√ß√£o geral
       - Identifica√ß√£o de grupos de risco
    
    4. **Correla√ß√µes Demogr√°ficas**:
       - Idade vs perman√™ncia hospitalar
       - Sexo vs tipo de interna√ß√£o
       - Padr√µes et√°rios por causa
    
    5. **Perfil do Paciente**:
       - Caracter√≠sticas t√≠picas
       - Grupos priorit√°rios
       - Recomenda√ß√µes espec√≠ficas
    """)
    
    # Exemplo de an√°lise b√°sica
    st.markdown("### Exemplo de An√°lise:")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Distribui√ß√£o por Sexo**")
        sexo_dist = data['sexo'].value_counts()
        sexo_labels = {1: 'Masculino', 3: 'Feminino'}
        sexo_dist.index = sexo_dist.index.map(sexo_labels)
        st.bar_chart(sexo_dist)
    
    with col2:
        st.markdown("**Estat√≠sticas de Idade**")
        st.metric("Idade M√©dia", f"{data['idade'].mean():.1f} anos")
        st.metric("Idade Mediana", f"{data['idade'].median():.1f} anos")
        st.metric("Idade Min/Max", f"{data['idade'].min():.0f} / {data['idade'].max():.0f} anos")
    
    # Faixas et√°rias
    st.markdown("### Faixas Et√°rias:")
    
    # Criar faixas et√°rias
    data_temp = data.copy()
    data_temp['faixa_etaria'] = pd.cut(data_temp['idade'], 
                                       bins=[0, 18, 60, 100], 
                                       labels=['0-18 anos', '19-59 anos', '60+ anos'])
    
    faixa_dist = data_temp['faixa_etaria'].value_counts()
    st.dataframe(faixa_dist.to_frame().reset_index())
    
    # Dados de exemplo para o desenvolvedor
    st.markdown("### Dados Dispon√≠veis para An√°lise:")
    st.write(f"- Idade m√≠nima: {data['idade'].min():.0f} anos")
    st.write(f"- Idade m√°xima: {data['idade'].max():.0f} anos")
    st.write(f"- Distribui√ß√£o por sexo: {data['sexo'].value_counts().to_dict()}")
    
    st.markdown("### Amostra dos Dados:")
    st.dataframe(data[['idade', 'sexo', 'val_tot', 'dias_perm', 'diag_princ']].head(10))