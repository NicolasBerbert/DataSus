import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import numpy as np

def apply_filters(data, filters):
    """Aplica filtros aos dados"""
    filtered_data = data.copy()
    
    # Filtro por per√≠odo
    if filters['periodo'] != 'Todos':
        if filters['periodo'] == 'Janeiro 2025':
            filtered_data = filtered_data[(filtered_data['ano_competencia'] == 2025) & (filtered_data['mes_competencia'] == 1)]
        elif filters['periodo'] == 'Fevereiro 2025':
            filtered_data = filtered_data[(filtered_data['ano_competencia'] == 2025) & (filtered_data['mes_competencia'] == 2)]
        elif filters['periodo'] == 'Mar√ßo 2025':
            filtered_data = filtered_data[(filtered_data['ano_competencia'] == 2025) & (filtered_data['mes_competencia'] == 3)]
    
    # Filtro por faixa et√°ria
    if filters['faixa_etaria'] != 'Todas':
        if filters['faixa_etaria'] == '0-18 anos':
            filtered_data = filtered_data[filtered_data['idade_anos'] <= 18]
        elif filters['faixa_etaria'] == '19-59 anos':
            filtered_data = filtered_data[(filtered_data['idade_anos'] >= 19) & (filtered_data['idade_anos'] <= 59)]
        elif filters['faixa_etaria'] == '60+ anos':
            filtered_data = filtered_data[filtered_data['idade_anos'] >= 60]
    
    # Filtro por sexo
    if filters['sexo'] != 'Todos':
        if filters['sexo'] == 'Masculino':
            filtered_data = filtered_data[filtered_data['sexo'] == 'Masculino']
        elif filters['sexo'] == 'Feminino':
            filtered_data = filtered_data[filtered_data['sexo'] == 'Feminino']
    
    # Filtro por tipo de interna√ß√£o
    if filters['tipo_internacao'] != 'Todos':
        if filters['tipo_internacao'] == 'Eletiva':
            filtered_data = filtered_data[filtered_data['carater_internacao'] == 'Eletiva']
        elif filters['tipo_internacao'] == 'Urg√™ncia':
            filtered_data = filtered_data[filtered_data['carater_internacao'] == 'Urg√™ncia']
    
    return filtered_data

def render_filters():
    """Renderiza os filtros da p√°gina"""
    st.markdown("### üîç Filtros")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        periodo = st.selectbox(
            "Per√≠odo",
            ["Todos", "Janeiro 2025", "Fevereiro 2025", "Mar√ßo 2025"],
            key="overview_periodo"
        )
    
    with col2:
        faixa_etaria = st.selectbox(
            "Faixa Et√°ria",
            ["Todas", "0-18 anos", "19-59 anos", "60+ anos"],
            key="overview_faixa_etaria"
        )
    
    with col3:
        sexo = st.selectbox(
            "Sexo",
            ["Todos", "Masculino", "Feminino"],
            key="overview_sexo"
        )
    
    with col4:
        tipo_internacao = st.selectbox(
            "Tipo de Interna√ß√£o",
            ["Todos", "Eletiva", "Urg√™ncia"],
            key="overview_tipo_internacao"
        )
    
    return {
        'periodo': periodo,
        'faixa_etaria': faixa_etaria,
        'sexo': sexo,
        'tipo_internacao': tipo_internacao
    }

def render_options_selector():
    """Renderiza seletor de op√ß√µes de visualiza√ß√£o"""
    st.markdown("### üìä Escolha as Informa√ß√µes para Visualizar")
    
    available_options = [
        "üìà M√©tricas Principais (KPIs)",
        "ü•ß Distribui√ß√£o por Principais Causas",
        "üìä An√°lise Temporal de Interna√ß√µes",
        "üí∞ An√°lise de Custos e Valores",
        "üë• Perfil Demogr√°fico dos Pacientes",
        "üè• An√°lise por Tipo de Interna√ß√£o",
        "‚è±Ô∏è Tempo de Perman√™ncia",
        "üó∫Ô∏è Top Munic√≠pios por Interna√ß√µes",
        "‚ö° Insights e Alertas Importantes"
    ]
    
    # Usar multiselect para permitir m√∫ltiplas sele√ß√µes
    selected_options = st.multiselect(
        "Selecione as visualiza√ß√µes que deseja ver:",
        available_options,
        default=available_options[:4],  # Primeiras 4 op√ß√µes selecionadas por padr√£o
        key="overview_selected_options"
    )
    
    return selected_options

def render_kpis(data):
    """Renderiza KPIs principais"""
    st.markdown("### üìà M√©tricas Principais")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_internacoes = len(data)
        st.metric(
            "Total de Interna√ß√µes",
            f"{total_internacoes:,}",
            delta=None,
            help="N√∫mero total de interna√ß√µes registradas"
        )
    
    with col2:
        valor_total = data['valor_total'].sum()
        st.metric(
            "Valor Total",
            f"R$ {valor_total:,.2f}",
            delta=None,
            help="Valor total gasto com interna√ß√µes"
        )
    
    with col3:
        media_permanencia = data['dias_permanencia'].mean()
        st.metric(
            "M√©dia de Perman√™ncia",
            f"{media_permanencia:.1f} dias",
            delta=None,
            help="Tempo m√©dio de perman√™ncia hospitalar"
        )
    
    with col4:
        idade_media = data['idade_anos'].mean()
        st.metric(
            "Idade M√©dia",
            f"{idade_media:.1f} anos",
            delta=None,
            help="Idade m√©dia dos pacientes internados"
        )
    
    # Segunda linha de KPIs
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        custo_medio = data['valor_total'].mean()
        st.metric(
            "Custo M√©dio/Interna√ß√£o",
            f"R$ {custo_medio:.2f}",
            help="Custo m√©dio por interna√ß√£o"
        )
    
    with col2:
        custo_dia = (data['valor_total'] / data['dias_permanencia']).mean()
        st.metric(
            "Custo M√©dio/Dia",
            f"R$ {custo_dia:.2f}",
            help="Custo m√©dio por dia de interna√ß√£o"
        )
    
    with col3:
        internacoes_urgencia = len(data[data['carater_internacao'] == 'Urg√™ncia'])
        perc_urgencia = (internacoes_urgencia / len(data)) * 100 if len(data) > 0 else 0
        st.metric(
            "% Urg√™ncia",
            f"{perc_urgencia:.1f}%",
            help="Percentual de interna√ß√µes de urg√™ncia"
        )
    
    with col4:
        idosos = len(data[data['idade_anos'] >= 60])
        perc_idosos = (idosos / len(data)) * 100 if len(data) > 0 else 0
        st.metric(
            "% Idosos (60+)",
            f"{perc_idosos:.1f}%",
            help="Percentual de pacientes idosos"
        )

def render_principais_causas(data):
    """Renderiza gr√°fico de principais causas"""
    st.markdown("### ü•ß Distribui√ß√£o por Principais Causas")
    
    # Top 10 causas mais comuns
    top_causas = data['diagnostico_principal'].value_counts().head(10)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Gr√°fico de pizza
        fig = px.pie(
            values=top_causas.values,
            names=top_causas.index,
            title="Top 10 Diagn√≥sticos Mais Frequentes"
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Tabela com n√∫meros
        st.markdown("**Ranking Detalhado:**")
        df_causas = pd.DataFrame({
            'Diagn√≥stico': top_causas.index,
            'Casos': top_causas.values,
            'Percentual': (top_causas.values / len(data) * 100).round(1)
        })
        st.dataframe(df_causas, use_container_width=True)

def render_analise_temporal(data):
    """Renderiza an√°lise temporal"""
    st.markdown("### üìä An√°lise Temporal de Interna√ß√µes")
    
    # Preparar dados temporais
    data_temp = data.copy()
    data_temp['periodo'] = data_temp['ano_competencia'].astype(str) + '-' + data_temp['mes_competencia'].astype(str).str.zfill(2)
    
    # Agrupar por per√≠odo
    internacoes_tempo = data_temp.groupby('periodo').size().reset_index(name='internacoes')
    valores_tempo = data_temp.groupby('periodo')['valor_total'].sum().reset_index(name='valor_total')
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de linha - Interna√ß√µes
        fig = px.line(
            internacoes_tempo,
            x='periodo',
            y='internacoes',
            title="N√∫mero de Interna√ß√µes por Per√≠odo",
            markers=True
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Gr√°fico de linha - Valores
        fig = px.line(
            valores_tempo,
            x='periodo',
            y='valor_total',
            title="Valor Total por Per√≠odo",
            markers=True
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

def render_analise_custos(data):
    """Renderiza an√°lise de custos"""
    st.markdown("### üí∞ An√°lise de Custos e Valores")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribui√ß√£o de custos
        fig = px.histogram(
            data,
            x='valor_total',
            nbins=30,
            title="Distribui√ß√£o de Custos das Interna√ß√µes"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Top 10 diagn√≥sticos mais caros
        custos_cid = data.groupby('diagnostico_principal')['valor_total'].sum().sort_values(ascending=False).head(10)
        
        fig = px.bar(
            x=custos_cid.values,
            y=custos_cid.index,
            orientation='h',
            title="Top 10 Diagn√≥sticos por Custo Total"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

def render_perfil_demografico(data):
    """Renderiza perfil demogr√°fico"""
    st.markdown("### üë• Perfil Demogr√°fico dos Pacientes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribui√ß√£o por idade
        fig = px.histogram(
            data,
            x='idade_anos',
            nbins=20,
            title="Distribui√ß√£o por Idade"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Distribui√ß√£o por sexo
        sexo_counts = data['sexo'].value_counts()
        
        fig = px.pie(
            values=sexo_counts.values,
            names=sexo_counts.index,
            title="Distribui√ß√£o por Sexo"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

def render_tipo_internacao(data):
    """Renderiza an√°lise por tipo de interna√ß√£o"""
    st.markdown("### üè• An√°lise por Tipo de Interna√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribui√ß√£o por tipo
        tipo_counts = data['carater_internacao'].value_counts()
        
        fig = px.bar(
            x=tipo_counts.index,
            y=tipo_counts.values,
            title="Distribui√ß√£o por Tipo de Interna√ß√£o"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Custo m√©dio por tipo
        custo_tipo = data.groupby('carater_internacao')['valor_total'].mean()
        
        fig = px.bar(
            x=custo_tipo.index,
            y=custo_tipo.values,
            title="Custo M√©dio por Tipo de Interna√ß√£o"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

def render_tempo_permanencia(data):
    """Renderiza an√°lise de tempo de perman√™ncia"""
    st.markdown("### ‚è±Ô∏è Tempo de Perman√™ncia")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribui√ß√£o de perman√™ncia
        fig = px.histogram(
            data,
            x='dias_permanencia',
            nbins=30,
            title="Distribui√ß√£o de Tempo de Perman√™ncia"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Perman√™ncia por faixa et√°ria
        data_temp = data.copy()
        data_temp['faixa_etaria'] = pd.cut(data_temp['idade_anos'], 
                                          bins=[0, 18, 60, 100], 
                                          labels=['0-18', '19-59', '60+'])
        
        perm_idade = data_temp.groupby('faixa_etaria')['dias_permanencia'].mean()
        
        fig = px.bar(
            x=perm_idade.index,
            y=perm_idade.values,
            title="Perman√™ncia M√©dia por Faixa Et√°ria"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

def render_top_municipios(data):
    """Renderiza top munic√≠pios"""
    st.markdown("### üó∫Ô∏è Top Munic√≠pios por Interna√ß√µes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Top 10 munic√≠pios por quantidade
        top_munic = data['codigo_municipio_residencia'].value_counts().head(10)
        
        fig = px.bar(
            x=top_munic.values,
            y=top_munic.index,
            orientation='h',
            title="Top 10 Munic√≠pios por Quantidade"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Top 10 munic√≠pios por custo
        custo_munic = data.groupby('codigo_municipio_residencia')['valor_total'].sum().sort_values(ascending=False).head(10)
        
        fig = px.bar(
            x=custo_munic.values,
            y=custo_munic.index,
            orientation='h',
            title="Top 10 Munic√≠pios por Custo Total"
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

def render_insights_alertas(data):
    """Renderiza insights e alertas"""
    st.markdown("### ‚ö° Insights e Alertas Importantes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üîç Insights Principais")
        
        # Calcular insights
        total_internacoes = len(data)
        valor_total = data['valor_total'].sum()
        causa_principal = data['diagnostico_principal'].value_counts().index[0] if len(data) > 0 else "N/A"
        perc_urgencia = (len(data[data['carater_internacao'] == 'Urg√™ncia']) / len(data)) * 100 if len(data) > 0 else 0
        
        st.info(f"""
        **Resumo Executivo:**
        - Total de {total_internacoes:,} interna√ß√µes registradas
        - Investimento total de R$ {valor_total:,.2f}
        - Principal causa: {causa_principal}
        - {perc_urgencia:.1f}% das interna√ß√µes s√£o de urg√™ncia
        """)
    
    with col2:
        st.markdown("#### üö® Alertas e Recomenda√ß√µes")
        
        # Alertas baseados nos dados
        alertas = []
        
        if perc_urgencia > 70:
            alertas.append("‚ö†Ô∏è Alto percentual de interna√ß√µes de urg√™ncia")
        
        custo_medio = data['valor_total'].mean()
        if custo_medio > 1000:
            alertas.append("üí∞ Custo m√©dio por interna√ß√£o elevado")
        
        idosos_perc = (len(data[data['idade_anos'] >= 60]) / len(data)) * 100 if len(data) > 0 else 0
        if idosos_perc > 40:
            alertas.append("üë¥ Alto percentual de pacientes idosos")
        
        if alertas:
            for alerta in alertas:
                st.warning(alerta)
        else:
            st.success("‚úÖ Nenhum alerta cr√≠tico identificado")

def render(data):
    """Renderiza a p√°gina de Vis√£o Geral"""
    
    st.markdown("## üìä Vis√£o Geral")
    
    # Renderizar seletor de op√ß√µes
    selected_options = render_options_selector()
    
    st.markdown("---")
    
    # Renderizar filtros
    filters = render_filters()
    
    # Aplicar filtros aos dados
    filtered_data = apply_filters(data, filters)
    
    # Mostrar informa√ß√µes sobre filtros aplicados
    if len(filtered_data) < len(data):
        st.info(f"üìä Mostrando {len(filtered_data):,} de {len(data):,} registros (filtros aplicados)")
    
    st.markdown("---")
    
    # Renderizar visualiza√ß√µes selecionadas
    if "üìà M√©tricas Principais (KPIs)" in selected_options:
        render_kpis(filtered_data)
        st.markdown("---")
    
    if "ü•ß Distribui√ß√£o por Principais Causas" in selected_options:
        render_principais_causas(filtered_data)
        st.markdown("---")
    
    if "üìä An√°lise Temporal de Interna√ß√µes" in selected_options:
        render_analise_temporal(filtered_data)
        st.markdown("---")
    
    if "üí∞ An√°lise de Custos e Valores" in selected_options:
        render_analise_custos(filtered_data)
        st.markdown("---")
    
    if "üë• Perfil Demogr√°fico dos Pacientes" in selected_options:
        render_perfil_demografico(filtered_data)
        st.markdown("---")
    
    if "üè• An√°lise por Tipo de Interna√ß√£o" in selected_options:
        render_tipo_internacao(filtered_data)
        st.markdown("---")
    
    if "‚è±Ô∏è Tempo de Perman√™ncia" in selected_options:
        render_tempo_permanencia(filtered_data)
        st.markdown("---")
    
    if "üó∫Ô∏è Top Munic√≠pios por Interna√ß√µes" in selected_options:
        render_top_municipios(filtered_data)
        st.markdown("---")
    
    if "‚ö° Insights e Alertas Importantes" in selected_options:
        render_insights_alertas(filtered_data)