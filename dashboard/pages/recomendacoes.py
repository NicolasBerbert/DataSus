import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

def render(data):
    """
    P√°gina de Recomenda√ß√µes
    
    Respons√°vel: [NOME_DESENVOLVEDOR_7]
    Prazo: [DATA_PRAZO]
    
    Esta p√°gina deve conter:
    - Recomenda√ß√µes baseadas nos dados
    - Planos de a√ß√£o espec√≠ficos
    - Indicadores de monitoramento
    """
    
    st.title("üí° Recomenda√ß√µes para Gest√£o")
    st.markdown("---")
    
    # Placeholder para desenvolvimento
    st.info("üöß **√Årea de Desenvolvimento - Recomenda√ß√µes**")
    st.markdown("""
    ### Tarefas para o Desenvolvedor:
    
    1. **An√°lise Automatizada**:
       - Identifica√ß√£o autom√°tica de padr√µes
       - Algoritmos de detec√ß√£o de anomalias
       - Insights baseados em dados
    
    2. **Recomenda√ß√µes Priorit√°rias**:
       - Ranqueamento por impacto
       - Viabilidade de implementa√ß√£o
       - Custo-benef√≠cio estimado
    
    3. **Planos de A√ß√£o**:
       - A√ß√µes espec√≠ficas por causa
       - Cronogramas sugeridos
       - Recursos necess√°rios
    
    4. **Indicadores de Monitoramento**:
       - KPIs para acompanhamento
       - Metas sugeridas
       - Alertas autom√°ticos
    
    5. **Relat√≥rios Executivos**:
       - Resumos gerenciais
       - Apresenta√ß√µes para gestores
       - Relat√≥rios personalizados
    
    6. **Simula√ß√£o de Cen√°rios**:
       - Proje√ß√µes de impacto
       - An√°lise de diferentes estrat√©gias
       - Estimativas de redu√ß√£o de custos
    """)
    
    # Exemplo de recomenda√ß√µes baseadas nos dados
    st.markdown("### Exemplo de Recomenda√ß√µes Baseadas nos Dados:")
    
    # An√°lise das principais causas para recomenda√ß√µes
    principais_causas = data['diag_princ'].value_counts().head(5)
    custos_por_causa = data.groupby('diag_princ')['val_tot'].sum().sort_values(ascending=False).head(5)
    
    # Recomenda√ß√£o 1: Foco nas principais causas
    st.markdown("#### üéØ Recomenda√ß√£o 1: Foco nas Principais Causas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Causas Mais Frequentes**")
        st.dataframe(principais_causas.head(3).to_frame().reset_index())
    
    with col2:
        st.markdown("**Maior Impacto Financeiro**")
        st.dataframe(custos_por_causa.head(3).to_frame().reset_index())
    
    st.markdown("""
    **A√ß√£o Sugerida:**
    - Implementar protocolos espec√≠ficos para os CIDs mais frequentes
    - Criar campanhas de preven√ß√£o direcionadas
    - Capacitar equipes para diagn√≥stico precoce
    """)
    
    # Recomenda√ß√£o 2: Otimiza√ß√£o et√°ria
    st.markdown("#### üë• Recomenda√ß√£o 2: Foco Et√°rio")
    
    idade_media = data['idade'].mean()
    idosos = data[data['idade'] >= 60]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Idade M√©dia dos Pacientes", f"{idade_media:.1f} anos")
        st.metric("% Idosos (60+)", f"{len(idosos)/len(data)*100:.1f}%")
    
    with col2:
        st.metric("Custo M√©dio Idosos", f"R$ {idosos['val_tot'].mean():.2f}")
        st.metric("Perman√™ncia M√©dia Idosos", f"{idosos['dias_perm'].mean():.1f} dias")
    
    st.markdown("""
    **A√ß√£o Sugerida:**
    - Programa espec√≠fico para popula√ß√£o idosa
    - Aten√ß√£o domiciliar expandida
    - Preven√ß√£o de quedas e fragilidade
    """)
    
    # Recomenda√ß√£o 3: Gest√£o de custos
    st.markdown("#### üí∞ Recomenda√ß√£o 3: Gest√£o de Custos")
    
    alto_custo = data[data['val_tot'] > data['val_tot'].quantile(0.9)]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Casos de Alto Custo (Top 10%)", f"{len(alto_custo)}")
        st.metric("% do Or√ßamento Total", f"{alto_custo['val_tot'].sum()/data['val_tot'].sum()*100:.1f}%")
    
    with col2:
        st.metric("Valor M√©dio Alto Custo", f"R$ {alto_custo['val_tot'].mean():.2f}")
        st.metric("Perman√™ncia M√©dia", f"{alto_custo['dias_perm'].mean():.1f} dias")
    
    st.markdown("""
    **A√ß√£o Sugerida:**
    - Auditoria espec√≠fica para casos de alto custo
    - Protocolos de gest√£o de casos complexos
    - Negocia√ß√£o com prestadores
    """)
    
    # Plano de implementa√ß√£o
    st.markdown("### üìã Plano de Implementa√ß√£o Sugerido:")
    
    plano_dados = {
        'Prioridade': ['Alta', 'Alta', 'M√©dia', 'M√©dia', 'Baixa'],
        'A√ß√£o': [
            'Protocolo para principais CIDs',
            'Programa de aten√ß√£o ao idoso',
            'Auditoria de alto custo',
            'Campanhas de preven√ß√£o',
            'Sistema de alertas'
        ],
        'Prazo': ['30 dias', '60 dias', '45 dias', '90 dias', '120 dias'],
        'Respons√°vel': ['Equipe Cl√≠nica', 'Geriatria', 'Auditoria', 'Comunica√ß√£o', 'TI']
    }
    
    st.dataframe(pd.DataFrame(plano_dados))
    
    # Dados de exemplo para o desenvolvedor
    st.markdown("### Dados Dispon√≠veis para An√°lise:")
    st.write(f"- Total de diagn√≥sticos √∫nicos: {data['diag_princ'].nunique()}")
    st.write(f"- Faixa et√°ria: {data['idade'].min():.0f} - {data['idade'].max():.0f} anos")
    st.write(f"- Faixa de custos: R$ {data['val_tot'].min():.2f} - R$ {data['val_tot'].max():.2f}")
    
    st.markdown("### Observa√ß√µes para o Desenvolvedor:")
    st.info("""
    - Esta p√°gina deve ser din√¢mica e baseada nos dados atuais
    - Considere usar machine learning para insights autom√°ticos
    - Implemente sistema de scoring para prioriza√ß√£o
    - Integre com indicadores de qualidade quando dispon√≠veis
    - Permita personaliza√ß√£o por perfil de usu√°rio (gestor, m√©dico, etc.)
    """)